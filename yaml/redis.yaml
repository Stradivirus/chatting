---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: chat
data:
  redis.conf: |
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    protected-mode no
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: chat
spec:
  serviceName: "redis-cluster"
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command: ["redis-server", "/conf/redis.conf"]
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: true
        env:
        - name: REDIS_HOST
          value: "redis-cluster.chat.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: FASTAPI_SERVICE
          value: "fastapi-service.chat.svc.cluster.local"
      volumes:
      - name: conf
        configMap:
          name: redis-cluster-config
          items:
          - key: redis.conf
            path: redis.conf
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: chat
  labels:
    app: redis-cluster
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip
  clusterIP: None
  selector:
    app: redis-cluster
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-cluster-init-sa
  namespace: chat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: redis-cluster-init-role
  namespace: chat
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: redis-cluster-init-rolebinding
  namespace: chat
subjects:
- kind: ServiceAccount
  name: redis-cluster-init-sa
  namespace: chat
roleRef:
  kind: Role
  name: redis-cluster-init-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: chat
spec:
  template:
    spec:
      serviceAccountName: redis-cluster-init-sa
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-init
        image: redis:6.2-alpine
        command:
        - sh
        - -c
        - |
          until redis-cli -h redis-cluster-0.redis-cluster.chat.svc.cluster.local ping; do echo waiting for redis-cluster-0; sleep 2; done
          redis-cli --cluster create \
            $(kubectl get pods -l app=redis-cluster -n chat -o jsonpath='{range .items[*]}{.status.podIP}:6379 {end}') \
            --cluster-replicas 1 \
            --cluster-yes